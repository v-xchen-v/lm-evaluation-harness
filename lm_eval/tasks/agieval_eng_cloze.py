"""
AGIEval: A Human-Centric Benchmark for Evaluating Foundation Models
https://arxiv.org/pdf/2304.06364.pdf

AGIEval is a human-centric benchmark specifically designed to evaluate the general abilities of foundation models in tasks pertinent to human cognition and problem-solving. This benchmark is derived from 20 official, public, and high-standard admission and qualification exams intended for general human test-takers, such as general college admission tests (e.g., Chinese College Entrance Exam (Gaokao) and American SAT), law school admission tests, math competitions, lawyer qualification tests, and national civil service exams.

Homepage: https://github.com/microsoft/AGIEval
"""

from lm_eval.base import Task, rf
from lm_eval.metrics import mean
import re

_CITATION = """
@misc{zhong2023agieval,
      title={AGIEval: A Human-Centric Benchmark for Evaluating Foundation Models}, 
      author={Wanjun Zhong and Ruixiang Cui and Yiduo Guo and Yaobo Liang and Shuai Lu and Yanlin Wang and Amin Saied and Weizhu Chen and Nan Duan},
      year={2023},
      eprint={2304.06364},
      archivePrefix={arXiv},
      primaryClass={cs.CL}
}
"""

class AGIEvalEngCloze(Task):
    VERSION = 1
    DATASET_PATH = "v-xchen-v/agieval_eng_cloze"
    DATASET_NAME = None

    def has_training_docs(self):
        return False

    def has_validation_docs(self):
        return True

    def has_test_docs(self):
        return False

    def training_docs(self):
        if self.has_training_docs():
            if self._training_docs is None:
                self._training_docs = list(self.dataset["train"])
            return self._training_docs

    def validation_docs(self):
        if self.has_validation_docs():
            return self.dataset["validation"]

    def test_docs(self):
        if self.has_test_docs():
            return self.dataset["test"]

    def _process_doc(self, doc):
        return doc

    def doc_to_zeroshot_prompt(self, doc):
        prompt = ("" if doc["passage"] is None else doc["passage"]) + "Q: " +   doc["question"] + "\n" + \
           "A: The answer is "
        return prompt

    def doc_to_fewshot_prompt(self, doc, num_fewshot):
        description = "Here are the answers for the problems in the exam.\n"

        # generate labeled examples
        def doc_to_question_input(doc, question_idx):
            passage = "" if doc["passage"] is None else doc["passage"]
            return "Problem {}.   ".format(question_idx) + passage + " " + doc["question"] + "\n" + "The anwser is "
        
        labeled_examples = ""
        fewshotex = self.fewshot_examples(k=num_fewshot)
        for fewshot_idx, fewshot_doc in enumerate(fewshotex):
            question_input = doc_to_question_input(fewshot_doc, fewshot_idx+1)
            question_output = self.doc_to_target(fewshot_doc)
            labeled_examples += question_input + question_output + "\n"

        end_of_labeled_example = "\n"

        example = doc_to_question_input(doc, num_fewshot+1)
        #         question_input = "Problem {}.   ".format(n_shot + 1) + passage + " " + question + "\n" \
        #     + "Choose from the following options:    " + " ".join(options) + "\n"
        #     # + "Explanation for Problem {}:   ".format(n_shot + 1)
        prompt = description + labeled_examples + end_of_labeled_example + example
        return prompt
    
    def doc_to_text(self, doc, num_fewshot):
        query_prompt = ""
        if num_fewshot == 0:
            query_prompt = self.doc_to_zeroshot_prompt(doc)
        elif num_fewshot > 0:
            query_prompt = self.doc_to_fewshot_prompt(doc, num_fewshot)

        # The query prompt portion of the document example.
        return query_prompt

    def doc_to_target(self, doc):
        target = doc['answer']
        return target

    def construct_requests(self, doc, ctx):
        """Uses RequestFactory to construct Requests and returns an iterable of
        Requests which will be sent to the LM.

        :param doc:
            The document as returned from training_docs, validation_docs, or
            test_docs.
        :param ctx: str
            The context string, generated by fewshot_context. This includes the natural
            language description, as well as the few shot examples, and the question
            part of the document for `doc`.
        """
        return rf.greedy_until(ctx, {"until": ['\n']})


    def process_results(self, doc, results):
        """Take a single document and the LM results and evaluates, returning a
        dict where keys are the names of submetrics and values are the values of
        the metric for that one document

        :param doc:
            The document as returned from training_docs, validation_docs, or test_docs.
        :param results:
            The results of the requests created in construct_requests.
        """
        retval = 0
        raw_string = results[0]
        if "\\boxed" in raw_string:
            answer = self.remove_boxed(self.last_boxed_only_string(raw_string))
        else:
            answer = self.get_answer_with_dollar_sign(raw_string)
            if not answer:
                answer = self.get_answer_without_dollar_sign(raw_string)

        if self.is_equiv(
            answer, doc["answer"]
        ):
            retval = 1
        return {"acc": retval}

    def aggregation(self):
        """
        :returns: {str: [metric_score] -> float}
            A dictionary where keys are the names of submetrics and values are
            functions that aggregate a list of metric scores
        """
        return {"acc": mean}

    def higher_is_better(self):
        return {"acc": True}
    
    def fewshot_examples(self, k):
        if self._fewshot_docs is None:
            self._fewshot_docs = list(map(self._process_doc, self.dataset['dev']))
        
        return self._fewshot_docs[:min(k, len(self._fewshot_docs))]

    def fewshot_context(
            self, doc, num_fewshot, provide_description=None, rnd=None, description=None
        ):
            """Returns a fewshot context string that is made up of a prepended description
            (if provided), the `num_fewshot` number of examples, and an appended prompt example.

            :param doc: str
                The document as returned from training_docs, validation_docs, or test_docs.
            :param num_fewshot: int
                The number of fewshot examples to provide in the returned context string.
            :param provide_description: bool
                Not implemented, and this option is deprecated and will be removed in a future version in favor of a different description providing method
            :param rnd: random.Random
                The pseudo-random number generator used to randomly sample examples.
                WARNING: This is currently a required arg although it's optionalized with a default `None`.
            :param description: str
                The task's description that will be prepended to the fewshot examples.
            :returns: str
                The fewshot context.
            """
            assert (
                rnd is not None
            ), "A `random.Random` generator argument must be provided to `rnd`"
            assert not provide_description, (
                "The `provide_description` arg will be removed in future versions. To prepend "
                "a custom description to the context, supply the corresponding string via the "
                "`description` arg."
            )
            if provide_description is not None:
                # nudge people to not specify it at all
                print(
                    "WARNING: provide_description is deprecated and will be removed in a future version in favor of description_dict"
                )

            description = description + "\n\n" if description else ""

            # if num_fewshot == 0:
            #     labeled_examples = ""
            # else:
            #     fewshotex = self.fewshot_examples(k=num_fewshot)
                
            #     labeled_examples = ""
            #     for fewshot_idx, doc in enumerate(fewshotex):
            #         "Problem {}.   ".format(fewshot_idx + 1) + self.doc_to_text(doc) + self.doc_to_target(doc) + "\n\n"

            # example = self.doc_to_text(doc)
            # return description + labeled_examples + example
            return self.doc_to_text(doc, num_fewshot)
        
    def get_answer_with_dollar_sign(self, s):
        first_pattern = "\$(.*)\$"
        last_match = None
        matches = re.findall(first_pattern, s)
        if matches:
            last_match = matches[-1]
            if "=" in last_match:
                last_match = last_match.split("=")[-1].lstrip(" ")
        return last_match

    def get_answer_without_dollar_sign(self, s):
        last_match = None
        if "=" in s:
            last_match = s.split("=")[-1].lstrip(" ").rstrip(".")
            if "\\n" in last_match:
                last_match = last_match.split("\\n")[0]
        else:
            pattern = "(?:\\$)?\d+(?:\.\d+)?(?![\w\d])"
            matches = re.findall(pattern, s)
            if matches:
                last_match = matches[-1]
        return last_match
    
    def fix_fracs(self, string):
        substrs = string.split("\\frac")
        new_str = substrs[0]
        if len(substrs) > 1:
            substrs = substrs[1:]
            for substr in substrs:
                new_str += "\\frac"
                if substr[0] == "{":
                    new_str += substr
                else:
                    try:
                        assert len(substr) >= 2
                    except AssertionError:
                        return string
                    a = substr[0]
                    b = substr[1]
                    if b != "{":
                        if len(substr) > 2:
                            post_substr = substr[2:]
                            new_str += "{" + a + "}{" + b + "}" + post_substr
                        else:
                            new_str += "{" + a + "}{" + b + "}"
                    else:
                        if len(substr) > 2:
                            post_substr = substr[2:]
                            new_str += "{" + a + "}" + b + post_substr
                        else:
                            new_str += "{" + a + "}" + b
        string = new_str
        return string

    def fix_a_slash_b(self, string):
        if len(string.split("/")) != 2:
            return string
        a = string.split("/")[0]
        b = string.split("/")[1]
        try:
            a = int(a)
            b = int(b)
            assert string == "{}/{}".format(a, b)
            new_string = "\\frac{" + str(a) + "}{" + str(b) + "}"
            return new_string
        except AssertionError:
            return string

    def remove_right_units(self, string):
        # "\\text{ " only ever occurs (at least in the val set) when describing units
        if "\\text{ " in string:
            splits = string.split("\\text{ ")
            assert len(splits) == 2
            return splits[0]
        else:
            return string

    def fix_sqrt(self, string):
        if "\\sqrt" not in string:
            return string
        splits = string.split("\\sqrt")
        new_string = splits[0]
        for split in splits[1:]:
            if split[0] != "{":
                a = split[0]
                new_substr = "\\sqrt{" + a + "}" + split[1:]
            else:
                new_substr = "\\sqrt" + split
            new_string += new_substr
        return new_string

    class NotEqual:
        def __eq__(self, other):
            return False

    def strip_string(self, string):
        # linebreaks
        string = string.replace("\n", "")

        # remove inverse spaces
        string = string.replace("\\!", "")

        # replace \\ with \
        string = string.replace("\\\\", "\\")

        # replace tfrac and dfrac with frac
        string = string.replace("tfrac", "frac")
        string = string.replace("dfrac", "frac")

        # remove \left and \right
        string = string.replace("\\left", "")
        string = string.replace("\\right", "")

        # Remove circ (degrees)
        string = string.replace("^{\\circ}", "")
        string = string.replace("^\\circ", "")

        # remove dollar signs
        string = string.replace("\\$", "")

        # remove units (on the right)
        string = self.remove_right_units(string)

        # remove percentage
        string = string.replace("\\%", "")
        string = string.replace("\%", "")  # noqa: W605

        # " 0." equivalent to " ." and "{0." equivalent to "{." Alternatively, add "0" if "." is the start of the string
        string = string.replace(" .", " 0.")
        string = string.replace("{.", "{0.")
        # if empty, return empty string
        if len(string) == 0:
            return string
        if string[0] == ".":
            string = "0" + string

        # to consider: get rid of e.g. "k = " or "q = " at beginning
        if len(string.split("=")) == 2:
            if len(string.split("=")[0]) <= 2:
                string = string.split("=")[1]

        # fix sqrt3 --> sqrt{3}
        string = self.fix_sqrt(string)

        # remove spaces
        string = string.replace(" ", "")

        # \frac1b or \frac12 --> \frac{1}{b} and \frac{1}{2}, etc. Even works with \frac1{72} (but not \frac{72}1). Also does a/b --> \\frac{a}{b}
        string = self.fix_fracs(string)

        # manually change 0.5 --> \frac{1}{2}
        if string == "0.5":
            string = "\\frac{1}{2}"

        # NOTE: X/Y changed to \frac{X}{Y} in dataset, but in simple cases fix in case the model output is X/Y
        string = self.fix_a_slash_b(string)

        return string
    
    def is_equiv(self, str1, str2, verbose=False):
        if str1 is None and str2 is None:
            print("WARNING: Both None")
            return True
        if str1 is None or str2 is None:
            return False

        try:
            ss1 = self.strip_string(str1)
            ss2 = self.strip_string(str2)
            if verbose:
                print(ss1, ss2)
            return ss1 == ss2
        except Exception:
            return str1 == str2

    def remove_boxed(self, s):
        left = "\\boxed{"
        try:
            assert s[:len(left)] == left
            assert s[-1] == "}"
            answer = s[len(left):-1]
            if "=" in answer:
                answer = answer.split("=")[-1].lstrip(" ")
            return answer
        except:
            return None

    def last_boxed_only_string(self, string):
        idx = string.rfind("\\boxed")
        if idx < 0:
            idx = string.rfind("\\fbox")
            if idx < 0:
                return None
        i = idx
        right_brace_idx = None
        num_left_braces_open = 0
        while i < len(string):
            if string[i] == "{":
                num_left_braces_open += 1
            if string[i] == "}":
                num_left_braces_open -= 1
                if num_left_braces_open == 0:
                    right_brace_idx = i
                    break
            i += 1

        if right_brace_idx == None:
            retval = None
        else:
            retval = string[idx:right_brace_idx + 1]

        return retval